g = graph.adjacency(true_adj, mode = "directed")
coords <- layout_in_circle(g)
plot(g, layout = coords)
g.ch = graph.adjacency(chol_adj, mode = "directed")
coords <- layout_in_circle(g.ch)
plot(g, layout = coords)
matimage(chol_adj)
matimage(true_adj)
matimage(chol_adj)
p = 15
n = 100
## dense
p_c =  0.3
data = get_DAGdata(n,p,p_c, type = "er", err = "g")
X = data$X
true_adj = t(data$truth[data$TO, data$TO]) * 1
ch = eqvarDAG_ch(X = X, type= "high", crit = "CV",nlam = 30, refine = TRUE,
mtd="ztest",alpha=0.05,
threshold=1e-1,FCD=NULL,precmtd=NULL)
require(igraph)
g = graph.adjacency(true_adj, mode = "directed")
coords <- layout_in_circle(g)
plot(g, layout = coords)
g.ch = graph.adjacency(chol_adj, mode = "directed")
coords <- layout_in_circle(g.ch)
plot(g, layout = coords)
ch$ord
ch$L
ch$L_refit
ch$adj
chol_adj = t(ch$adj * 1) # t(ch$adj[ch$ord,ch$ord]) * 1
chol_adj =  t(ch$adj[ch$ord,ch$ord]) * 1
matimage(chol_adj)
matimage(true_adj)
matimage(chol_adj)
chol_adj = t(ch$adj * 1) # t(ch$adj[ch$ord,ch$ord]) * 1
matimage(chol_adj)
matimage(true_adj)
plot(g.ch, layout = coords)
plot(g, layout = coords)
plot(g.ch, layout = coords)
ch = eqvarDAG_ch(X = X, type= "high", crit = "CV",nlam = 30, refine = FALSE,
mtd="ztest",alpha=0.05,
threshold=1e-1,FCD=NULL,precmtd=NULL)
require(igraph)
g = graph.adjacency(true_adj, mode = "directed")
coords <- layout_in_circle(g)
plot(g, layout = coords)
g.ch = graph.adjacency(chol_adj, mode = "directed")
coords <- layout_in_circle(g.ch)
plot(g.ch, layout = coords)
ch$ord
ch$L
ch$L_refit
ch$adj
chol_adj = t(ch$adj * 1) # t(ch$adj[ch$ord,ch$ord]) * 1
matimage(chol_adj)
chol_adj = (ch$adj * 1) # t(ch$adj[ch$ord,ch$ord]) * 1
matimage(chol_adj)
matimage(true_adj)
TD = EqVarDAG_HD_TD(X, J = 3)
TD_adj = t(TD$adj[TD$TO, TD$TO]) * 1
matimage(TD_adj)
matimage(TD_adj)
matimage(true_adj)
hammingDistance(chol_adj, true_adj)
hammingDistance(TD_adj, true_adj)
hammingDistance(BT_adj, true_adj)
compareGraph(chol_adj, true_adj)
compareGraph(TD_adj, true_adj)
p = 50
n = 100
## dense
p_c =  0.3
data = get_DAGdata(n,p,p_c, type = "er", err = "g")
X = data$X
true_adj = t(data$truth[data$TO, data$TO]) * 1
ch = eqvarDAG_ch(X = X, type= "high", crit = "CV",nlam = 30, refine = FALSE,
mtd="ztest",alpha=0.05,
threshold=1e-1,FCD=NULL,precmtd=NULL)
require(igraph)
g = graph.adjacency(true_adj, mode = "directed")
coords <- layout_in_circle(g)
plot(g, layout = coords)
g.ch = graph.adjacency(chol_adj, mode = "directed")
coords <- layout_in_circle(g.ch)
plot(g.ch, layout = coords)
ch$ord
ch$L
ch$L_refit
ch$adj
chol_adj = (ch$adj * 1) # t(ch$adj[ch$ord,ch$ord]) * 1
matimage(chol_adj)
matimage(true_adj)
matimage(chol_adj)
#' @param gamma  - parameter for eBIC. Active if crit = "eBIC"
#' @param refine - if TRUE, refines edges after CSCS algorithm
#' @param mtd    - parameters for refine
#' @param alpha  - parameters for refine
#' @param threshold - threshold value
#' @param FCD     - parameters for refine
#' @param precmtd - parameters for refine
#' @param crit   - criterion for penalty parameter selection
#' @export
#' @return - ordering, lower triangular Cholesky factor and adjacency matrix
eqvarDAG_ch <- function(X, type = c("low", "high"), crit = c("CV","eBIC"), gamma = 0.5, refine = FALSE, lamlist = NULL,
nlam = 30, flmin = 0.01, mtd="dlasso",alpha=0.05,
threshold=1e-1, FCD=TRUE, precmtd="sqrtlasso")
{
p = dim(X)[2]
n = dim(X)[1]
ord = c()
if (type == "low")
{
cat("here", "\n")
S = cov(X)
T = t(chol(S))
L = solve(T)
L[abs(L) < 1e-9] = 0
}else{
if (crit == "CV")
{
ch = varband_cv(X, w = FALSE, lasso = TRUE, lamlist = lamlist, nlam = nlam,
flmin = flmin, folds = NULL, nfolds = 5)
lambda = ch$lamlist[ch$ibest_refit]
cat("lambda is", lambda , "\n")
L  = ch$L_refit
init = L
}else{
L = varband_ebic(X, w = FALSE, lasso = TRUE, lamlist = lamlist, nlam = nlam,
flmin = flmin, folds = NULL, nfolds = 5, gamma = gamma)$L_fit
}
T = solve(L)
}
ord = get_ordering_ch(L, T, p)
if(isTRUE(refine))
{
cat("here", "\n")
adj=DAG_from_Ordering(X,TO = ord,mtd,alpha,threshold,FCD,precmtd)
adj = adj[ord,ord]
}else{
if (crit == "CV")
{
S <- crossprod(scale(X[, ord], center=TRUE, scale=FALSE)) / n
L = varband(S, w = FALSE, init = init, lasso = TRUE, lambda = lambda)
# ch = varband_cv(X[,ord], w = FALSE, lasso = TRUE, lamlist = lamlist, nlam = nlam,
#               flmin = flmin, folds = NULL, nfolds = 5)
#   L = ch$L_refit
#     L_fit   = ch$L_fit
}else{
L = varband_ebic(X[, ord], w = FALSE, lasso = TRUE, lamlist = lamlist, nlam = nlam,
flmin = flmin, folds = NULL, nfolds = 5, gamma = gamma)$L_refit
}
B = diag(p) - L / (diag(L))
adj = B * (abs(B) > threshold) != 0
}
## obtain adjacency matrix
return(list("ord" = ord, "L" = L, "adj" = adj))
}
ch = eqvarDAG_ch(X = X, type= "high", crit = "CV",nlam = 30, refine = FALSE,
mtd="ztest",alpha=0.05,
threshold=1e-1,FCD=NULL,precmtd=NULL)
chol_adj = (ch$adj * 1) # t(ch$adj[ch$ord,ch$ord]) * 1
matimage(chol_adj)
matimage(true_adj)
ch$ord
data$TO
ch = eqvarDAG_ch(X = X, type= "high", crit = "CV",nlam = 50, refine = FALSE,
mtd="ztest",alpha=0.05,
threshold=1e-1,FCD=NULL,precmtd=NULL)
g = graph.adjacency(true_adj, mode = "directed")
coords <- layout_in_circle(g)
plot(g, layout = coords)
ch$ord
data$TO
ch$ord
ch$L
ch$L_refit
ch$adj
chol_adj = (ch$adj * 1) # t(ch$adj[ch$ord,ch$ord]) * 1
matimage(chol_adj)
matimage(true_adj)
matimage(chol_adj)
ch = eqvarDAG_ch(X = X, type= "high", crit = "CV",nlam = 50, refine = FALSE,
mtd="ztest",alpha=0.05,
threshold=1e-8,FCD=NULL,precmtd=NULL)
g = graph.adjacency(true_adj, mode = "directed")
coords <- layout_in_circle(g)
plot(g, layout = coords)
ch$ord
ch$L
ch$L_refit
ch$adj
chol_adj = (ch$adj * 1) # t(ch$adj[ch$ord,ch$ord]) * 1
matimage(chol_adj)
matimage(true_adj)
#' @param gamma  - parameter for eBIC. Active if crit = "eBIC"
#' @param refine - if TRUE, refines edges after CSCS algorithm
#' @param mtd    - parameters for refine
#' @param alpha  - parameters for refine
#' @param threshold - threshold value
#' @param FCD     - parameters for refine
#' @param precmtd - parameters for refine
#' @param crit   - criterion for penalty parameter selection
#' @export
#' @return - ordering, lower triangular Cholesky factor and adjacency matrix
eqvarDAG_ch <- function(X, type = c("low", "high"), crit = c("CV","eBIC"), gamma = 0.5, refine = FALSE, lamlist = NULL,
nlam = 30, flmin = 0.01, mtd="dlasso",alpha=0.05,
threshold=1e-1, FCD=TRUE, precmtd="sqrtlasso")
{
p = dim(X)[2]
n = dim(X)[1]
ord = c()
if (type == "low")
{
cat("here", "\n")
S = cov(X)
T = t(chol(S))
L = solve(T)
L[abs(L) < 1e-9] = 0
}else{
if (crit == "CV")
{
ch = varband_cv(X, w = FALSE, lasso = TRUE, lamlist = lamlist, nlam = nlam,
flmin = flmin, folds = NULL, nfolds = 5)
lambda = ch$lamlist[ch$ibest_refit]
cat("lambda is", lambda , "\n")
L  = ch$L_refit
}else{
L = varband_ebic(X, w = FALSE, lasso = TRUE, lamlist = lamlist, nlam = nlam,
flmin = flmin, folds = NULL, nfolds = 5, gamma = gamma)$L_fit
}
T = solve(L)
}
ord = get_ordering_ch(L, T, p)
if(isTRUE(refine))
{
cat("here", "\n")
adj=DAG_from_Ordering(X,TO = ord,mtd,alpha,threshold,FCD,precmtd)
adj = adj[ord,ord]
}else{
if (crit == "CV")
{
S <- crossprod(scale(X[, ord], center=TRUE, scale=FALSE)) / n
init = (1/ sqrt(diag(S)))
L = varband(S, w = FALSE, init = init, lasso = TRUE, lambda = lambda)
# ch = varband_cv(X[,ord], w = FALSE, lasso = TRUE, lamlist = lamlist, nlam = nlam,
#               flmin = flmin, folds = NULL, nfolds = 5)
#   L = ch$L_refit
#     L_fit   = ch$L_fit
}else{
L = varband_ebic(X[, ord], w = FALSE, lasso = TRUE, lamlist = lamlist, nlam = nlam,
flmin = flmin, folds = NULL, nfolds = 5, gamma = gamma)$L_refit
}
B = diag(p) - L / (diag(L))
adj = B * (abs(B) > threshold) != 0
}
## obtain adjacency matrix
return(list("ord" = ord, "L" = L, "adj" = adj))
}
ch = eqvarDAG_ch(X = X, type= "high", crit = "CV",nlam = 40, refine = FALSE,
mtd="ztest",alpha=0.05,
threshold=1e-8,FCD=NULL,precmtd=NULL)
#' @param gamma  - parameter for eBIC. Active if crit = "eBIC"
#' @param refine - if TRUE, refines edges after CSCS algorithm
#' @param mtd    - parameters for refine
#' @param alpha  - parameters for refine
#' @param threshold - threshold value
#' @param FCD     - parameters for refine
#' @param precmtd - parameters for refine
#' @param crit   - criterion for penalty parameter selection
#' @export
#' @return - ordering, lower triangular Cholesky factor and adjacency matrix
eqvarDAG_ch <- function(X, type = c("low", "high"), crit = c("CV","eBIC"), gamma = 0.5, refine = FALSE, lamlist = NULL,
nlam = 30, flmin = 0.01, mtd="dlasso",alpha=0.05,
threshold=1e-1, FCD=TRUE, precmtd="sqrtlasso")
{
p = dim(X)[2]
n = dim(X)[1]
ord = c()
if (type == "low")
{
cat("here", "\n")
S = cov(X)
T = t(chol(S))
L = solve(T)
L[abs(L) < 1e-9] = 0
}else{
if (crit == "CV")
{
ch = varband_cv(X, w = FALSE, lasso = TRUE, lamlist = lamlist, nlam = nlam,
flmin = flmin, folds = NULL, nfolds = 5)
lambda = ch$lamlist[ch$ibest_refit]
cat("lambda is", lambda , "\n")
L  = ch$L_refit
}else{
L = varband_ebic(X, w = FALSE, lasso = TRUE, lamlist = lamlist, nlam = nlam,
flmin = flmin, folds = NULL, nfolds = 5, gamma = gamma)$L_fit
}
T = solve(L)
}
ord = get_ordering_ch(L, T, p)
if(isTRUE(refine))
{
cat("here", "\n")
adj=DAG_from_Ordering(X,TO = ord,mtd,alpha,threshold,FCD,precmtd)
adj = adj[ord,ord]
}else{
if (crit == "CV")
{
S <- crossprod(scale(X[, ord], center=TRUE, scale=FALSE)) / n
init = diag(1/ sqrt(diag(S)))
L = varband(S, w = FALSE, init = init, lasso = TRUE, lambda = lambda)
# ch = varband_cv(X[,ord], w = FALSE, lasso = TRUE, lamlist = lamlist, nlam = nlam,
#               flmin = flmin, folds = NULL, nfolds = 5)
#   L = ch$L_refit
#     L_fit   = ch$L_fit
}else{
L = varband_ebic(X[, ord], w = FALSE, lasso = TRUE, lamlist = lamlist, nlam = nlam,
flmin = flmin, folds = NULL, nfolds = 5, gamma = gamma)$L_refit
}
B = diag(p) - L / (diag(L))
adj = B * (abs(B) > threshold) != 0
}
## obtain adjacency matrix
return(list("ord" = ord, "L" = L, "adj" = adj))
}
ch = eqvarDAG_ch(X = X, type= "high", crit = "CV",nlam = 40, refine = FALSE,
mtd="ztest",alpha=0.05,
threshold=1e-8,FCD=NULL,precmtd=NULL)
chol_adj = (ch$adj * 1) # t(ch$adj[ch$ord,ch$ord]) * 1
matimage(chol_adj)
matimage(true_adj)
matimage(chol_adj)
matimage(true_adj)
ch = eqvarDAG_ch(X = X, type= "low", crit = "CV",nlam = 40, refine = FALSE,
mtd="ztest",alpha=0.05,
threshold=1e-8,FCD=NULL,precmtd=NULL)
#' @param gamma  - parameter for eBIC. Active if crit = "eBIC"
#' @param refine - if TRUE, refines edges after CSCS algorithm
#' @param mtd    - parameters for refine
#' @param alpha  - parameters for refine
#' @param threshold - threshold value
#' @param FCD     - parameters for refine
#' @param precmtd - parameters for refine
#' @param crit   - criterion for penalty parameter selection
#' @export
#' @return - ordering, lower triangular Cholesky factor and adjacency matrix
eqvarDAG_ch <- function(X, type = c("low", "high"), crit = c("CV","eBIC"), gamma = 0.5, refine = FALSE, lamlist = NULL,
nlam = 30, flmin = 0.01, mtd="dlasso",alpha=0.05,
threshold=1e-1, FCD=TRUE, precmtd="sqrtlasso")
{
p = dim(X)[2]
n = dim(X)[1]
ord = c()
if (type == "low")
{
cat("here", "\n")
S = cov(X)
T = t(chol(S))
L = solve(T)
L[abs(L) < 1e-9] = 0
lambda = NULL
}else{
if (crit == "CV")
{
ch = varband_cv(X, w = FALSE, lasso = TRUE, lamlist = lamlist, nlam = nlam,
flmin = flmin, folds = NULL, nfolds = 5)
lambda = ch$lamlist[ch$ibest_refit]
cat("lambda is", lambda , "\n")
L  = ch$L_refit
}else{
L = varband_ebic(X, w = FALSE, lasso = TRUE, lamlist = lamlist, nlam = nlam,
flmin = flmin, folds = NULL, nfolds = 5, gamma = gamma)$L_fit
}
T = solve(L)
}
ord = get_ordering_ch(L, T, p)
if(isTRUE(refine))
{
cat("here", "\n")
adj=DAG_from_Ordering(X,TO = ord,mtd,alpha,threshold,FCD,precmtd)
adj = adj[ord,ord]
}else{
if (crit == "CV")
{
S <- crossprod(scale(X[, ord], center=TRUE, scale=FALSE)) / n
init = diag(1/ sqrt(diag(S)))
L = varband(S, w = FALSE, init = init, lasso = TRUE, lambda = lambda)
# ch = varband_cv(X[,ord], w = FALSE, lasso = TRUE, lamlist = lamlist, nlam = nlam,
#               flmin = flmin, folds = NULL, nfolds = 5)
#   L = ch$L_refit
#     L_fit   = ch$L_fit
}else{
L = varband_ebic(X[, ord], w = FALSE, lasso = TRUE, lamlist = lamlist, nlam = nlam,
flmin = flmin, folds = NULL, nfolds = 5, gamma = gamma)$L_refit
}
B = diag(p) - L / (diag(L))
adj = B * (abs(B) > threshold) != 0
}
## obtain adjacency matrix
return(list("ord" = ord, "L" = L, "adj" = adj))
}
ch = eqvarDAG_ch(X = X, type= "low", crit = "CV",nlam = 40, refine = FALSE,
mtd="ztest",alpha=0.05,
threshold=1e-8,FCD=NULL,precmtd=NULL)
ch = eqvarDAG_ch(X = X, type= "low", crit = "CV",nlam = 40, refine = TRUE,
mtd="ztest",alpha=0.05,
threshold=1e-8,FCD=NULL,precmtd=NULL)
ch$ord
ch$L
ch$L_refit
ch$adj
chol_adj = (ch$adj * 1) # t(ch$adj[ch$ord,ch$ord]) * 1
matimage(chol_adj)
matimage(true_adj)
chol_adj =  (ch$adj[ch$ord,ch$ord]) * 1
matimage(chol_adj)
chol_adj = t(ch$adj * 1) # t(ch$adj[ch$ord,ch$ord]) * 1
matimage(chol_adj)
matimage(true_adj)
g.ch = graph.adjacency(chol_adj, mode = "directed")
coords <- layout_in_circle(g.ch)
plot(g.ch, layout = coords)
ch = eqvarDAG_ch(X = X, type= "low", crit = "CV",nlam = 40, refine = TRUE,
mtd="dlasso",alpha=0.05,
threshold=1e-1,FCD=TRUE,precmtd="sqrtlasso")
warnings()
ch$ord
ch$L
ch$L_refit
ch$adj
chol_adj = t(ch$adj * 1) # t(ch$adj[ch$ord,ch$ord]) * 1
matimage(chol_adj)
matimage(true_adj)
g.ch = graph.adjacency(chol_adj, mode = "directed")
coords <- layout_in_circle(g.ch)
plot(g.ch, layout = coords)
ch$ord
data$TO
compareGraph(chol_adj, true_adj)
TD = EqVarDAG_HD_TD(X, J = 3)
TD_adj = t(TD$adj[TD$TO, TD$TO]) * 1
compareGraph(TD_adj, true_adj)
BT = EqVarDAG_HD(X)
BT = EqVarDAG_HD(X)
BT = EqVarDAG_HD(X)
BT_adj = t(BT$adj[BT$TO,BT$TO]) * 1
matimage(BT_adj)
matimage(chol_adj)
chol_adj = t(ch$adj * 1) # t(ch$adj[ch$ord,ch$ord]) * 1
chol_adj
ch = eqvarDAG_ch(X = X, type= "low", crit = "CV",nlam = 40, refine = TRUE,
mtd="dlasso",alpha=0.05,
threshold=1e-1,FCD=TRUE,precmtd="sqrtlasso")
chol_adj = t(ch$adj * 1) # t(ch$adj[ch$ord,ch$ord]) * 1
matimage(chol_adj)
rm(list = ls())
require(EqVarDAG)
source("..\\Code\\EqVarDAG-master\\Experiments\\sims_high.R")
require(eqVarChol)
#source("..\\Code\\verequalChol.R")
#source("..\\Code\\EqVarDAG-master\\R\\EqVarDAG_HD_CLIME.R")
nSim = 10
p = 50
n = 100
## dense
p_c =  0.3
hamming = matrix(0, nSim, 3)
tpr = fpr = tdr = matrix(0, nSim, 3)
library(doParallel)
library(doRNG)
nworkers <- detectCores()
nworkers
cl <- makeCluster(nworkers)
registerDoParallel(cl)
p = 50
n = 100
## dense
p_c =  0.3
data = get_DAGdata(n,p,p_c, type = "er", err = "g")
X = data$X
true_adj = t(data$truth[data$TO, data$TO]) * 1
BT = EqVarDAG_BT(X)
BT = EqVarDAG_BT(X)
BT_adj = t(BT$adj[BT$TO,BT$TO]) * 1
BT_adj
matimage(BT_adj)
matimage(BT_adj)
ch = eqvarDAG_ch(X = X, type= "high", crit = "CV",nlam = 40, refine = TRUE,
mtd="dlasso",alpha=0.05,
threshold=1e-1,FCD=TRUE,precmtd="sqrtlasso")
ch = eqvarDAG_ch(X = X, type= "high", crit = "CV",nlam = 40, refine = FALSE,
mtd="dlasso",alpha=0.05,
threshold=1e-1,FCD=TRUE,precmtd="sqrtlasso")
chol_adj = t(ch$adj * 1) # t(ch$adj[ch$ord,ch$ord]) * 1
matimage(chol_adj)
chol_adj = (ch$adj * 1) # t(ch$adj[ch$ord,ch$ord]) * 1
matimage(chol_adj)
hammingDistance(chol_adj, true_adj)
compareGraph(chol_adj, true_adj)
ch = eqvarDAG_ch(X = X, type= "high", crit = "CV",nlam = 40, refine = TRUE,
mtd="dlasso",alpha=0.05,
threshold=1e-1,FCD=TRUE,precmtd="sqrtlasso")
compareGraph(chol_adj, true_adj)
chol_adj = (ch$adj * 1) # t(ch$adj[ch$ord,ch$ord]) * 1
matimage(chol_adj)
compareGraph(chol_adj, true_adj)
chol_adj = t(ch$adj * 1) # t(ch$adj[ch$ord,ch$ord]) * 1
matimage(chol_adj)
hammingDistance(chol_adj, true_adj)
compareGraph(chol_adj, true_adj)
